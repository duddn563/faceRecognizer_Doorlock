// -------------------- gui/MainWindow.cpp --------------------
#include "MainWindow.hpp"
#include "ui_MainWindow.h"


// 저장된 얼굴 매핑: label -> gray face image
map<int, vector<Mat>> storedFaces;

std::vector<UserData> storedUsers;

MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)
{
		try {
				setupUi();
		} catch (const std::exception& e) {
				LOG_CRITICAL(QString("setupUi failed: %1").arg(e.what()));
				showErrorMessage("Fatal Error", "An error occurred during initialization.\nprogram will now terminate.");
				qApp->exit(-1);

		} catch (...) {
				LOG_CRITICAL("Unknown exception occurred during setupUi");
				showErrorMessage("Fatal Error", "Unknown error occurred.\nprogram will now terminate.");
				qApp->exit(-1);
		}
		
		setupQTimer();

		/*
		openCamera();

		//setupFaceRecognitionWorker();
		
		createLBPH();
		loadFaceCascade();
		loadEyesCascade();

		registerExistingUser();
		*/

		setupFdUltrasonic();
		setupDdUltrasonic();

}

void MainWindow::setupFaceRecognitionWorker() 
{
		worker = new FaceRecognizerWorker;
		workerThread = new QThread;

		worker->moveToThread(workerThread);

		connect(workerThread, &QThread::started, worker, &FaceRecognizerWorker::initialize);

		connect(worker, &FaceRecognizerWorker::recognitionResult,
						this, [](const QString &msg) {
								qDebug() << "Recognition Result:" << msg;
						});

		connect(worker, &FaceRecognizerWorker::errorOccurred,
						this, [](const QString &err) {
								qWarning() << "Worker error: " << err;
						});

		connect(workerThread, &QThread::finished, worker, &QObject::deleteLater);

		workerThread->start();
}


/*
void MainWindow::openCamera()
{
		try {
				cap.open(CAM_NUM);
				if (!cap.isOpened()) {
						showErrorMessage("Warning", "Failed to open camera.");;
						Logger::writef("[%s] Camera open was failed(cam %d)!!\n", __func__, CAM_NUM);
						return;
				}
				Logger::writef("[%s] Camera open was successfully(cam %d)!!\n", __func__, CAM_NUM);
		} catch (const cv::Exception& e) {
				LOG_CRITICAL(QString("OpenCV exception: %1").arg(e.what()));
		}
}
*/

void MainWindow::setupUi()
{
		ui = new Ui::MainWindow;
		ui->setupUi(this);

		setupCameraLabel();

		try {
				setupOverlayLabel();

		} catch (const exception& e) {
				LOG_CRITICAL(QString("exception: %1").arg(e.what()));
				showErrorMessage("Warning", "Failed to initialize overlay label");
				overlayLabel = nullptr;
		}

		setMinimumSize(WINDOW_MIN_WIDTH, WINDOW_MIN_HEIGHT);

		applyStyles();
		connectSignals();

}

void MainWindow::setupCameraLabel()
{
		ui->cameraLabel->setScaledContents(true);
}

void MainWindow::setupOverlayLabel()
{
		overlayLabel = new QLabel(ui->cameraLabel);
		if (!overlayLabel) {
				throw std::runtime_error("Failed to allocate overlayLabel");
		}
		overlayLabel->setScaledContents(true);
		overlayLabel->resize(ui->cameraLabel->size());
		overlayLabel->hide();
}

void MainWindow::applyStyles()
{
    ui->statusbar->setStyleSheet(STATUS_BAR_STYLE);
    ui->cameraLabel->setStyleSheet(CAM_LABEL_STYLE);

    for (QPushButton* button : buttonList()) {
				if (button) {
						button->setStyleSheet(BTN_STYLE);
				}
				else {
						LOG_WARN("Nullptr button in buttonList()");
				}
    }
}

void MainWindow::connectSignals()
{
		auto connectWithCheck = [this](QPushButton* btn, auto slot, const QString& name) {
				bool rc = connect(btn, &QPushButton::clicked, this, slot);
				if (!rc) {
						LOG_WARN(QString("%1 connection failed!").arg(name));
						showErrorMessage("Connection Error", QString("Failed to connect %1 button.").arg(name));
				}
		};

		connectWithCheck(ui->registerButton, &MainWindow::onRegisterFace, "Register Button");
		connectWithCheck(ui->clearButton, &MainWindow::onClearUsers, "Clear Button");
		connectWithCheck(ui->btnShowUsers, &MainWindow::showUserList, "Show User Button");
		connectWithCheck(ui->showUserImages, &MainWindow::onShowUserImages, "Show User Image Button");
		connectWithCheck(ui->ExitButton, &MainWindow::onExitProgram, "Exit Button");
}

QList<QPushButton*> MainWindow::buttonList() const
{
		return {
			ui->registerButton,
			ui->clearButton,
			ui->btnShowUsers,
			ui->showUserImages,
			ui->ExitButton
		};
}

void MainWindow::showErrorMessage(const QString& title, const QString& message)
{
		QMessageBox::critical(this, title, message);
}

void MainWindow::setupFdUltrasonic()
{
		QThread *FD_ultrasonicThread = new QThread(this);

    // 쓰레드 객체 생성
		FD_UltrasonicWorker *FD_ultrasonicWorker = new FD_UltrasonicWorker();

		// 워커를 쓰레드로 이동
		FD_ultrasonicWorker->moveToThread(FD_ultrasonicThread);

		// 시작되면 process() 실행
		connect(FD_ultrasonicThread, &QThread::started, FD_ultrasonicWorker, &FD_UltrasonicWorker::FD_process);

		// 신호 연결
		connect(FD_ultrasonicWorker, &FD_UltrasonicWorker::personDetected, this, [this]() {
				isFaceDetecting = true;
				ui->statusbar->showMessage("사람 감지됨. 얼굴 인식 중...");
		});

		connect(FD_ultrasonicWorker, &FD_UltrasonicWorker::personLeft, this, [this]() {
				isFaceDetecting = false;
				ui->statusbar->showMessage("사람 없음. 대기 중...");
		});

		// 쓰레드 시작
		Logger::writef("[%s] FD_Ultrasonic Thread start!!\n", __func__);
		FD_ultrasonicThread->start();
}

void MainWindow::setupDdUltrasonic()
{
		QThread *DD_ultrasonicThread = new QThread(this);

		DD_UltrasonicWorker *DD_ultrasonicWorker = new DD_UltrasonicWorker();

		DD_ultrasonicWorker->moveToThread(DD_ultrasonicThread);

		connect(DD_ultrasonicThread, &QThread::started, DD_ultrasonicWorker, &DD_UltrasonicWorker::DD_process);

		connect(DD_ultrasonicWorker, &DD_UltrasonicWorker::doorDetected, this, [this]() {
				isDoorDetecting = true;
				//ui->statusbar2->showMessage("문이 닫혔있습니다..");
		});

		connect(DD_ultrasonicWorker, &DD_UltrasonicWorker::doorLeft, this, [this]() {
				isDoorDetecting = false;
				//ui->statusbar2->showMessage("문이 열려있습니다..");
		});

		Logger::writef("[%s] DD_Ultrasonic Thread start!!\n", __func__);
		DD_ultrasonicThread->start();
}

void MainWindow::setupQTimer()
{
		timer = new QTimer(this);
		// 타이머는 얼굴 감지 중일 때만 실행
		connect(timer, &QTimer::timeout, this, [this]() {
				if (isDoorDetecting) {
						if (isFaceDetecting) {
								overlayLabel->hide();

								updateFrame();
						}
						else {
								showComeImage();
						}
				}
				else {
						showOpenImage();
				}
							
		});
		timer->start(100);
}

void MainWindow::showComeImage()
{
		QPixmap pixmap(COME_IMAGE_PATH);
	
		if (pixmap.isNull()) {
				qDebug() << "Failed to load come image";
				Logger::writef("[%s] Failed to load the come image!!", __func__);
		}

		pixmap = pixmap.scaled(overlayLabel->size(),  Qt::KeepAspectRatioByExpanding, Qt::SmoothTransformation);

		overlayLabel->setPixmap(pixmap);
		overlayLabel->resize(ui->cameraLabel->size());
		overlayLabel->show();
}

void MainWindow::showOpenImage()
{
		QPixmap pixmap(OPEN_IMAGE_PATH);
		if (pixmap.isNull()) {
				qDebug() << "Failed to load open image";
				Logger::writef("[%s] Failed to load the open image!!", __func__);
		}

		pixmap = pixmap.scaled(overlayLabel->size(), Qt::KeepAspectRatioByExpanding, Qt::SmoothTransformation);

		overlayLabel->setPixmap(pixmap);
		overlayLabel->resize(ui->cameraLabel->size());
		overlayLabel->show();
}

/*
void MainWindow::createLBPH()
{
		Logger::writef("[%s] LBPHFaceRecognizer loading...", __func__);

		try {
				faceRecognizer = face::LBPHFaceRecognizer::create();
		} catch (Exception& e) {
				qDebug() << "LBPHFaceRecognizer 생성 실패:" << e.what();
				Logger::writef("[%s] LBPHFaceRecognizer loading failed...", __func__);
		}
}

void MainWindow::loadFaceCascade()
{
		Logger::writef("[%s] face cascade loading...", __func__);

		// 얼굴 인식용 분류기 로드
    if (!faceCascade.load(HAARCASCADE_FRONTALFACE)) {
				QMessageBox::critical(this, "Error", "얼굴 분류가 존재하지 않습니다.");
				Logger::writef("[%s] 얼굴 분류기가 존재하지 않습니다.");
				exit(1);
		}
}

void MainWindow::loadEyesCascade()
{
		Logger::writef("[%s] Eys cascade loading...", __func__);

		// 눈 인식용 분류기 로드
		if (!eyeCascade.load(HAARCASCADE_EYE)) {
				QMessageBox::critical(this, "Error", "눈 분류기가 존재하지 않습니다.");
				Logger::writef("[%s] 눈분류기가 존재하지 않습니다...", __func__);
				exit(1);
		}
}

void MainWindow::registerExistingUser()
{
		vector<Mat> images;
		vector<int> labels;

		UserData newUser;

		if (!fs::exists(USER_FACES_DIR)) {
				fs::create_directory(USER_FACES_DIR);
				Logger::writef("[%s] Create file(%s)", __func__, USER_FACES_DIR);
		}


		int rc = fs::is_directory(USER_FACES_DIR);
		
		if (rc == 1) {
				// 기존 등록 사용자 얼굴 데이터 로드
				for (const auto& entry : fs::directory_iterator(USER_FACES_DIR)) {
						string fname = entry.path().filename().string();
						// filename pattern: face_<label>_&.png
						if (!fname.empty()) {

								size_t firstUnderscore = fname.find('_');
								size_t secondUnderscore = fname.find('_', firstUnderscore + 1);
								size_t thirdUnderscore = fname.find('_', secondUnderscore + 1);

								int label = std::stoi(fname.substr(firstUnderscore + 1, secondUnderscore - firstUnderscore - 1));
								string name = fname.substr(secondUnderscore + 1, thirdUnderscore - secondUnderscore - 1);

								//cvtColor(frame, frame, cv::COLOR_BGR2RGB);
								//int label = std::stoi(fname.substr(fname.find('_') + 1, fname.find('_', fname.find('_') + 1) - fname.find('_') - 1));
								//string name = fname.substr(fname.find('_') + 1, 

								Mat grayImg = cv::imread(entry.path().string(), IMREAD_GRAYSCALE);
								cv::resize(grayImg, grayImg, Size(200, 200));

								Mat colorImg = cv::imread(entry.path().string(), IMREAD_COLOR);
								cv::resize(colorImg, colorImg, Size(200, 200));
								cv::cvtColor(colorImg, colorImg, cv::COLOR_BGR2RGB);


								storedFaces[label].push_back(grayImg);
								//cout << "label: " << label << endl;
								images.push_back(grayImg);
								labels.push_back(label);
		
								newUser.label			= label;
								newUser.name			= QString::fromStdString(name);
								newUser.colorFaceImage = colorImg;
								newUser.grayFaceImage  = grayImg; 
								storedUsers.push_back(newUser);
						}
				}
				printf ("[%s] labels count: %d\n", __func__, labels.size());
		}
		else {
				Logger::writef("[%s] Is not exists existing faces!!", __func__);
				QMessageBox::information(this, "Error", "기존 등록된 얼굴이 없습니다.\n 얼굴을 새로 등록해주세요!\n");
		}

		Logger::writef("[%s] Load the existing face into program from %s!!", __func__, USER_FACES_DIR);

		//if (!images.empty()) faceRecognizer->train(images, labels);
		//else Logger::writef("[%s] Failed to existing faces train!!", __func__);

		faceRecognizer->train(images, labels);
		loadLabelMap();

}

bool MainWindow::isUserNameExists(const QString& name) 
{
		for (const auto& [label, storedName] : labelMap) {
				if (QString::fromStdString(storedName) == name) return true;
		}

		return false;
}
*/

void MainWindow::onClearUsers() {
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, "모든 사용자 삭제", "모든 등록된 사용자 데이터를 삭제하시겠습니까?",
                                  QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        clearAllUserData();
        ui->statusbar->showMessage("모든 사용자 데이터가 삭제되었습니다.");
    }
}


void MainWindow::clearAllUserData()
{
		// Delete face images
		for (const auto& entry : fs::directory_iterator(USER_FACES_DIR)) {
				if(entry.path().filename().string().find("face_") == 0) {
						fs::remove(entry.path());
				}
		}

		// Delete label map
		if (access(USER_LABEL_FILE, F_OK) == 0) {
				cout << "[" << __func__ << "] Clear user data file!!!" << endl;
				fs::remove(USER_LABEL_FILE);
				ifstream file(USER_LABEL_FILE);
				file.close();
		}

		// Delete memory
		storedUsers.clear();
		labelMap.clear();

		cout << "User data is initialized!!!" << endl;
}

MainWindow::~MainWindow() {
    cap.release();  // 카메라 종료

		if (workerThread && workerThread->isRunning()) {
				worker->stop();
				workerThread->quit();
				workerThread->wait();
		}

		delete worker;
		delete workerThread;

    delete ui;
}

/*
int MainWindow::getNextLabel() {
		// label.txt에서 마지막 라벨 읽기
		ifstream ifs(USER_LABEL_FILE);
		
		// if not exist label.txt, Label.txt be create to /usr/local/etc/face_doorlock
		if (!access(USER_LABEL_FILE, F_OK) == 0) {
				ifstream file(USER_LABEL_FILE);
				file.close();
		}
	

		int maxLabel = 0;

		if (ifs.is_open()) {
				int lbl;
				string name;
				while (ifs >> lbl >> name) {
						//cout << "name: " << name << ",  label: " << lbl << endl;
						if (lbl > maxLabel) maxLabel = lbl;
				}

		}

		return maxLabel + 1;
}

void MainWindow::loadLabelMap() 
{
		int rc = 0;

		ifstream ifs(USER_LABEL_FILE);

		rc = Utile::checkFileExist(USER_LABEL_FILE, R_OK + W_OK);
		if (rc == -1) {
				rc = Utile::createFile(USER_LABEL_FILE, R_OK + W_OK);
				if (rc == -1) {
						Logger::writef("[%s] Failed to create file(%s)\n", __func__, USER_LABEL_FILE);		
						exit(1);
				}
		}

		if (ifs.is_open()) {
				int lbl;
				string name;

				while (ifs >> lbl >> name) {
						labelMap[lbl] = name;
				}
		}
}

void MainWindow::saveLabelToFile(int label, const string &name) {
		//if (access(USER_LABEL_FILE, F_OK) == 0) {
				ofstream ofs (USER_LABEL_FILE, ios::app);
				if (ofs.is_open()) ofs << label << " " << name << endl;
		//}
}
	

void MainWindow::onRegisterFace() 
{
		if (isRegistering) return;

		userName = QInputDialog::getText(this, "사용자 등록", "이름을 입력하세요:");
		if (userName.isEmpty()) return;

		if (isUserNameExists(userName)) {
				QMessageBox::warning(this, "중복 사용자", "이미 등록된 사용자 이름입니다.");
				return;
		}

		currentLabel = getNextLabel();
		captureCount = 0;
		isRegistering = true;
		ui->statusbar->showMessage("[등록 중]" + userName + ": 0/20");
}

void MainWindow::showUserList() 
{
		QString filePath = QString::fromStdString(USER_LABEL_FILE);
		QFile file(filePath);

		if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
				QMessageBox::warning(this, "오류",  "label.txt 파일을 열 수 없습니다.");
				return;
		}

		QStringList users;
		while (!file.atEnd()) {
				QByteArray line = file.readLine();
				QString str(line);
				QStringList parts = str.trimmed().split(' ');
				if (parts.size() >= 2) {
						users.append(parts[0] + ": " + parts[1]);
				}
		}

		if (users.isEmpty()) {
				QMessageBox::information(this, "사용자 목록", "등록된 사용자가 없습니다.");
		} else {
				 QMessageBox::information(this, "사용자 목록", users.join("\n"));
		}
}
*/

void MainWindow::onExitProgram()
{
		QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, "프로그램 종료", "프로그램을 종료하시겠습니까?",
                                  QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
				exit(1);
    }
}

void MainWindow::onShowUserImages()
{
    // Create new QDialog
    QDialog *dialog = new QDialog(this);
    dialog->setWindowTitle("등록된 사용자 이미지 목록");

    // Show the image as a QListWidget
    QListWidget *listWidget = new QListWidget(dialog);

    // 🔴 QMap으로 원본 이미지 저장 (썸네일과 연동)
    QMap<QListWidgetItem*, cv::Mat> originalImages;

    // 👉 storedUsers 순회 (이제 UserData의 colorFaceImage를 쓸거야!)
    for (const auto& user : storedUsers) {
        cv::Mat colorFace = user.colorFaceImage;

        // 🔴  OpenCV Mat를 QImage로 변환
        QImage img(colorFace.data,
                    colorFace.cols,
                    colorFace.rows,
                    static_cast<int>(colorFace.step),
                    QImage::Format_RGB888);

        // 🔴  QPixmap으로 변환해서 QListWidget에 추가
        QPixmap pixmap = QPixmap::fromImage(img).scaled(64, 64, Qt::KeepAspectRatio);
        QListWidgetItem *item = new QListWidgetItem;
        item->setIcon(QIcon(pixmap));
        item->setText(QString("Label: %1, Name: %2").arg(user.label).arg(user.name));
        listWidget->addItem(item);

        // 👉 원본 이미지 저장 (복사!)
        originalImages[item] = colorFace.clone();
    }

    // 🔴 2️⃣ 아이템 클릭 시 큰 이미지로 보기
    connect(listWidget, &QListWidget::itemClicked, [=](QListWidgetItem *item){
        // 원본 이미지 가져오기
        cv::Mat colorFace = originalImages[item];

        // QImage 변환
        QImage img(colorFace.data,
                    colorFace.cols,
                    colorFace.rows,
                    static_cast<int>(colorFace.step),
                    QImage::Format_RGB888);

        // 👉 QDialog로 큰 이미지 보기
        QDialog *imageDialog = new QDialog(dialog);
        imageDialog->setWindowTitle(item->text());

        QLabel *imageLabel = new QLabel(imageDialog);
        imageLabel->setPixmap(QPixmap::fromImage(img).scaled(500, 500, Qt::KeepAspectRatio));

        QVBoxLayout *imageLayout = new QVBoxLayout(imageDialog);
        imageLayout->addWidget(imageLabel);
        imageDialog->setLayout(imageLayout);

        imageDialog->exec();
        delete imageDialog;
    });

    QVBoxLayout *layout = new QVBoxLayout(dialog);
    layout->addWidget(listWidget);
    dialog->setLayout(layout);

    dialog->exec();
    delete dialog;
}

/*
// 사용되고 있지 않음 리구현예정
bool MainWindow::isDuplicateFace(const Mat& newFace)
{
		if (!faceRecognizer || newFace.empty()) {
        std::cerr << "[오류] 얼굴 인식기가 초기화되지 않았거나 입력 이미지가 비어 있습니다." << std::endl;
        return false;
    }

    int predictedLabel = -1;
    double confidence = 0.0;

    // 예측 수행 (입력은 반드시 흑백이어야 함)
    cv::Mat gray;
    if (newFace.channels() == 3)
        cv::cvtColor(newFace, gray, cv::COLOR_RGB2GRAY);
    else
        gray = newFace;

		//if (!storedFaces.empty()) {
		if (!storedUsers.empty()) {
				faceRecognizer->predict(gray, predictedLabel, confidence);
		}

    std::cout << "예측된 라벨: " << predictedLabel << ", 신뢰도: " << confidence << std::endl;

    // 신뢰도 기준으로 중복 여부 판단
    const double DUPLICATE_THRESHOLD = 50.0; // 작을수록 엄격 (OpenCV LBPH 기준 50~100 적절)

    return (confidence < DUPLICATE_THRESHOLD) && (confidence) && (predictedLabel != -1);
}

Mat MainWindow::alignAndNormalizeFace(const Mat& grayFrame, const Rect& faceRect)
{
		Mat faceROI = grayFrame(faceRect).clone();

		// 눈 검출
		vector<Rect> eyes;
		eyeCascade.detectMultiScale(faceROI, eyes, 1.1, 10, 0, Size(20, 20));

		if (eyes.size() < 2) return {};	 // 눈이 2개 미만이면 실패

		// 눈 2개를 좌/우로 정렬
		Point eye1 = (eyes[0].x < eyes[1].x) ? eyes[0].tl() : eyes[1].tl();
		Point eye2 = (eyes[0].x < eyes[1].x) ? eyes[1].tl() : eyes[0].tl();

		// 눈 중심 계산
		eye1 += Point(eyes[0].width/2, eyes[0].height/2);
		eye2 += Point(eyes[1].width/2, eyes[1].height/2);

		// 각도 계산
		double dy = eye2.y - eye1.y;
		double dx = eye2.x - eye1.x;
		double angle = atan2(dy, dx) * 180.0 / CV_PI;

		// 얼굴 중앙 기준 회전
		Point2f center(faceROI.cols/2.0F, faceROI.rows/2.0F);
		Mat rot = getRotationMatrix2D(center, angle, 1.0);

		Mat aligned;
		warpAffine(faceROI, aligned, rot, faceROI.size());

		// 밝기 보정 + 크기 조정
		equalizeHist(aligned, aligned);
		cv::resize(aligned, aligned, Size(200, 200));

		//cout << "[" << __func__ << "] Face is aligned and normalized!!" << endl;
		return aligned;
}

void MainWindow::updateFrame() {
    Mat frame, gray;
		Mat colorFace;

    cap >> frame;
    if (frame.empty()) return;

		// 얼굴 인식용 흑백 이미지 생성
    cvtColor(frame, gray, cv::COLOR_RGB2GRAY);
		equalizeHist(gray, gray);

		// 얼굴 탐지
		vector<Rect> faces;
		faceCascade.detectMultiScale(
				gray, faces,
				1.1,					// scaleFactor: 이미지 크기를 줄여가며 탐지 (1.1~1.3 추천)					
				5,						// minNeighbors: 최소 이웃 수 (값이 높을수록 정밀, 3~6 추천)
				CASCADE_SCALE_IMAGE,
				Size(100, 100) // 최소 얼굴 크기 설정 (너무 작으면 false positive 발생)			
		);

		for (const auto& face : faces) {

				colorFace = frame(face);

				Mat alignedFace = alignAndNormalizeFace(gray, face);
				if (alignedFace.empty()) continue;

				//Mat faceROI = gray(face);
				//cv::resize(faceROI, faceROI, Size(200, 200));


				// 얼굴 영역에서 눈 검출
				vector<Rect> eyes;
				eyeCascade.detectMultiScale(faceROI, eyes, 1.1, 10, 0, cv::Size(20, 20));
				if (eyes.size() < 2) continue; // 눈이 2개 미만이면 false positive 제거
				// 눈도 시각적으로 표시하고 싶으면 추가
				for (const auto& eye : eyes) {
						cv::Point eyeCenter(face.x + eye.x + eye.width / 2, face.y + eye.y + eye.height / 2);
						int radius = cvRound((eye.width + eye.height) * 0.25);
						cv::circle(frame, eyeCenter, radius, cv::Scalar(255, 0, 0), 2);
				}

				QString labelText;
				Scalar boxColor;


				if (!isRegistering) {
						// 등록 모드가 아닐 때 등록된 사용자와 비교
						int predictedLabel = -1;
						double confidence = 999.0;

						if (!storedFaces.empty()) {
								faceRecognizer->predict(alignedFace, predictedLabel, confidence);
						}

						//cout << "[" << __func__ << "] predictedLabel: " << predictedLabel << "confidence: " << confidence << endl; 
						if (confidence < 60.0 && labelMap.count(predictedLabel)) {
								labelText = QString::fromStdString(labelMap[predictedLabel]);
								boxColor = Scalar(0, 255, 0);
						}
						else {
								labelText = "Unknown";
								boxColor= Scalar(0, 0, 255);
						}
						rectangle(frame, face, boxColor, 2);

						putText(frame, labelText.toStdString(), Point(face.x + 100, face.y + face.height + 20),
										FONT_HERSHEY_SIMPLEX, 0.8, boxColor, 2);
				}
				else if (isRegistering) {
						labelText = "Registering...";
						boxColor = Scalar(255, 0, 0);

						rectangle(frame, face, Scalar(255, 0, 0), 2);
						putText(frame, labelText.toStdString(), Point(face.x, face.y + face.height + 20),
										FONT_HERSHEY_SIMPLEX, 0.8, boxColor, 2);

						//rectangle(frame, cv::Rect(0, 0, frame.cols - 1, frame.rows - 1), Scalar(0, 255, 0), 4);

						if (captureCount == 0 && isDuplicateFace(alignedFace)) {
								ui->statusbar->showMessage("이미 등록된 얼굴입니다.");
								isRegistering = false;
								return;
						}

						if (captureCount < 20) {
								if (!fs::exists(USER_FACES_DIR)) 
										fs::create_directory(USER_FACES_DIR);

								UserData newUser;

								string filename = CONF_PATH + string("data/face_") + to_string(currentLabel) + "_" + userName.toStdString() + "_" + to_string(captureCount + 1) + ".png";
								newUser.label = currentLabel;
								newUser.colorFaceImage = colorFace;
								newUser.grayFaceImage = alignedFace;

								storedUsers.push_back(newUser);
								//cout << "[1'th label]" << storedUsers[0].label << endl;

								//if (!imwrite(filename, alignedFace)) {
								if (!imwrite(filename, colorFace)) {
									qDebug() << "이미지 저장 실패: " << QString::fromStdString(filename);
								}
								storedFaces[currentLabel].push_back(alignedFace);
								labelMap[currentLabel] = userName.toStdString();
								captureCount++;
								ui->statusbar->showMessage(QString("[등록중] %1: %2/20").arg(userName).arg(captureCount));
								if (captureCount >= 20) {
										saveLabelToFile(currentLabel, userName.toStdString());

										vector<Mat> images;
										vector<int> labels;
										for (const auto& entry : storedFaces) {
												for (const auto& img : entry.second) {
														images.push_back(img);
														labels.push_back(entry.first);
												}
										}

										faceRecognizer->train(images, labels);
										isRegistering = false;
										ui->statusbar->showMessage("[등록 완료]" + userName);
								}
						}

										}

				//cv::cvtColor(frame, frame, cv::COLOR_BGR2RGB);
				//QImage qimg(frame.data, frame.cols, frame.rows, frame.step, QImage::Format_RGB888);
				//ui->cameraLabel->setPixmap(QPixmap::fromImage(qimg));
		}

		cvtColor(frame, frame, COLOR_BGR2RGB);
    //QImage qimg(frame.data, frame.cols, frame.rows, frame.step, QImage::Format_BGR888);
    QImage qimg(frame.data, frame.cols, frame.rows, frame.step, QImage::Format_RGB888);
    ui->cameraLabel->setPixmap(QPixmap::fromImage(qimg));
}
void MainWindow::updateFrame() {
    Mat frame, gray;
    Mat colorFace;

    cap >> frame;
    if (frame.empty()) return;

    cvtColor(frame, gray, cv::COLOR_RGB2GRAY);
    equalizeHist(gray, gray);

    vector<Rect> faces;
    faceCascade.detectMultiScale(
        gray, faces, 1.1, 5, CASCADE_SCALE_IMAGE, Size(100, 100));

    for (const auto& face : faces) {
        colorFace = frame(face);

        Mat alignedFace = alignAndNormalizeFace(gray, face);
        if (alignedFace.empty()) continue;

        QString labelText;
        Scalar boxColor;

        if (!isRegistering) {
            int predictedLabel = -1;
            double confidence = 999.0;

            //if (!storedFaces.empty()) {
            if (!storedUsers.empty()) {
                faceRecognizer->predict(alignedFace, predictedLabel, confidence);
            }

            if (confidence < 60.0 && labelMap.count(predictedLabel)) {
                labelText = QString::fromStdString(labelMap[predictedLabel]);
                boxColor = Scalar(0, 255, 0);
            } else {
                labelText = "Unknown";
                boxColor= Scalar(0, 0, 255);
            }

            rectangle(frame, face, boxColor, 2);
            putText(frame, labelText.toStdString(), Point(face.x + 100, face.y + face.height + 20),
                    FONT_HERSHEY_SIMPLEX, 0.8, boxColor, 2);
        }
        else if (isRegistering) {
            labelText = "Registering...";
            boxColor = Scalar(255, 0, 0);

            rectangle(frame, face, Scalar(255, 0, 0), 2);
            putText(frame, labelText.toStdString(), Point(face.x, face.y + face.height + 20),
                    FONT_HERSHEY_SIMPLEX, 0.8, boxColor, 2);

            if (captureCount == 0 && isDuplicateFace(alignedFace)) {
                ui->statusbar->showMessage("이미 등록된 얼굴입니다.");
                isRegistering = false;
                return;
            }

            if (captureCount < 20) {
                if (!fs::exists(USER_FACES_DIR))
                    fs::create_directory(USER_FACES_DIR);

                UserData newUser;

                string filename = CONF_PATH + string("data/face_") + to_string(currentLabel) + "_" + userName.toStdString() + "_" + to_string(captureCount + 1) + ".png";
                newUser.label = currentLabel;
								newUser.name  = userName;
                newUser.colorFaceImage = colorFace;
                newUser.grayFaceImage = alignedFace;

                storedUsers.push_back(newUser);

                if (!imwrite(filename, colorFace)) {
                  qDebug() << "이미지 저장 실패: " << QString::fromStdString(filename);
                }
                storedFaces[currentLabel].push_back(alignedFace);
                labelMap[currentLabel] = userName.toStdString();
                captureCount++;
                ui->statusbar->showMessage(QString("[등록중] %1: %2/20").arg(userName).arg(captureCount));

                if (captureCount >= 20) {
                    saveLabelToFile(currentLabel, userName.toStdString());
                    vector<Mat> images;
                    vector<int> labels;
                    for (const auto& entry : storedFaces) {
                        for (const auto& img : entry.second) {
                            images.push_back(img);
                            labels.push_back(entry.first);
                        }
                    }
                    faceRecognizer->train(images, labels);
                    isRegistering = false;
                    ui->statusbar->showMessage("[등록 완료]" + userName);
                }
            }
        }
    }

    // 🔴 루프가 끝난 뒤 최종 프레임을 한 번만 그리기!
    cvtColor(frame, frame, cv::COLOR_BGR2RGB);
    QImage qimg(frame.data, frame.cols, frame.rows, frame.step, QImage::Format_RGB888);
    ui->cameraLabel->setPixmap(QPixmap::fromImage(qimg));
}
*/

